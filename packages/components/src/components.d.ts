/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MenuItem } from "./components/app-interfaces";
import { InputChangeEventDetail } from "./components/input/input";
import { StyleSheet } from "jss";
export namespace Components {
    interface AppLogo {
        "claim": boolean;
        "color": string;
        "href": string;
    }
    interface AppMegaMenu {
        "activeRouteId": string;
        "hide": () => void;
        "navigation": MenuItem[];
    }
    interface AppNavigationMainMobile {
        "activeRouteId": string;
        "navigation": MenuItem[];
    }
    interface AppNavigationSectorMobile {
        "activeSectorId"?: string;
        "navigation": MenuItem[];
    }
    interface ScaleAccordion {
        "dependent": boolean;
        "styles"?: any;
    }
    interface ScaleAlert {
        /**
          * (optional) Alert class
         */
        "customClass"?: string;
        /**
          * (optional) Alert title
         */
        "headline": string;
        /**
          * (optional) Alert icon
         */
        "icon"?: string;
        /**
          * Alert method: open()
         */
        "open": () => Promise<void>;
        /**
          * (optional) Alert opened
         */
        "opened": boolean;
        /**
          * (optional) Alert size
         */
        "size"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Alert timeout
         */
        "timeout"?: boolean | number;
        /**
          * (optional) Alert variant
         */
        "variant"?: string;
    }
    interface ScaleAppHeader {
        "activeRouteId": string;
        "activeSectorId"?: string;
        "addonNavigation"?: any[];
        "customClass"?: string;
        "iconNavigation"?: any[];
        "mainNavigation"?: any[];
        "scrolled": boolean;
        "sectorNavigation"?: any[];
    }
    interface ScaleAppShell {
        "activeRouteId"?: string;
        "activeSectorId"?: string;
        "addonNavigation"?: any;
        "customClass"?: string;
        "iconNavigation"?: any;
        "mainNavigation"?: any;
        "sectorNavigation"?: any;
    }
    interface ScaleBreadcrumb {
        "separator"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleButton {
        "ariaLabel"?: string;
        /**
          * (optional) Button class
         */
        "customClass"?: string;
        /**
          * Button method: disable()
         */
        "disable": () => Promise<void>;
        /**
          * (optional) Disabled button
         */
        "disabled"?: boolean;
        /**
          * Button method: enable()
         */
        "enable": () => Promise<void>;
        "focusable"?: boolean;
        /**
          * (optional) Link button
         */
        "href"?: string;
        /**
          * (optional) Icon only
         */
        "icon"?: string;
        /**
          * (optional) Icon after
         */
        "iconAfter"?: string;
        /**
          * (optional) Icon before
         */
        "iconBefore"?: string;
        /**
          * (optional) Icon only
         */
        "iconSize"?: number;
        "role"?: string;
        /**
          * (optional) Button size
         */
        "size"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Link target button
         */
        "target"?: string;
        /**
          * (optional) button type
         */
        "type"?: 'reset' | 'submit' | 'button';
        /**
          * (optional) Button variant
         */
        "variant"?: string;
    }
    interface ScaleCard {
        /**
          * (optional) Card class
         */
        "customClass"?: string;
        /**
          * (optional) Link disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Link card
         */
        "href"?: string;
        /**
          * (optional) Link interactive
         */
        "interactive"?: boolean;
        /**
          * (optional) Padding off
         */
        "noPadding"?: boolean;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Link card target
         */
        "target"?: string;
    }
    interface ScaleCarousel {
        /**
          * (optional) Carousel class
         */
        "customClass"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) carousel display direction
         */
        "vertical"?: boolean;
    }
    interface ScaleChartStackCard {
        /**
          * (optional) Custom class
         */
        "customClass"?: string;
        /**
          * Chart Data
         */
        "data": string | Array<Record<'type' | 'value' | 'percentage', string>>;
        /**
          * Chart Title
         */
        "heading": string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleCollapsible {
        "close": () => Promise<void>;
        "isExpanded"?: boolean;
        "label": string;
        "setFocus": () => Promise<void>;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        "tag"?: string;
    }
    interface ScaleDivider {
        /**
          * (optional) Divider class
         */
        "customClass"?: string;
        /**
          * (optional) Divider size
         */
        "size"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Divider vertical
         */
        "vertical"?: boolean;
    }
    interface ScaleIcon {
        /**
          * (optional) Tag custom class
         */
        "customClass"?: string;
        /**
          * The SVG `fill` attribute
         */
        "fill"?: string;
        "focusable"?: boolean;
        /**
          * A name that will be used to reference an SVG object defined elsewhere, via `<use xlink:href="">`. `icon-` will be prepended to the name, so if you pass `circle`, it will look for for the `icon-circle` id e.g. `<use xlink:href="#icon-circle">`. If there is no element in the document with the id by the name provided, this component will render empty.
         */
        "name"?: string;
        /**
          * A path shape to be used in the `d` attribute of a path element.
         */
        "path"?: string;
        /**
          * Will be used for both `width` and `height`, all icons are square. Keep in mind the `viewBox` attribute is set to "0 0 24 24".
         */
        "size"?: number;
        /**
          * The SVG `stroke` attribute
         */
        "stroke"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleInput {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input text class
         */
        "customClass"?: string;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox checked icon
         */
        "icon"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input label
         */
        "label": string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * (optional) Input status
         */
        "status"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'checkbox'
    | 'radio'
    | 'select'
    | 'textarea'
    | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Input label variant
         */
        "variant"?: 'animated' | 'static';
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface ScaleLink {
        /**
          * (optional) Block link
         */
        "block"?: boolean;
        /**
          * (optional) Link class
         */
        "customClass"?: string;
        /**
          * (optional) Disabled link
         */
        "disabled"?: boolean;
        /**
          * (optional) Link href
         */
        "href": string;
        /**
          * (optional) Icon only
         */
        "icon"?: string;
        /**
          * (optional) Icon size
         */
        "iconSize"?: number;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Link open a new tag
         */
        "target"?: string;
        /**
          * (optional) Link variant
         */
        "variant"?: string;
    }
    interface ScaleList {
        "styles"?: any;
        /**
          * (optional) List variant
         */
        "variant"?: string;
    }
    interface ScaleListItem {
        /**
          * (optional) List item icon
         */
        "icon"?: string;
        /**
          * (optional) list Icon size
         */
        "iconSize"?: number;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) List item style type
         */
        "type"?: string;
    }
    interface ScaleModal {
        /**
          * (optional) Modal class
         */
        "customClass"?: string;
        /**
          * (optional) If true, the Modal is open.
         */
        "opened"?: boolean;
        /**
          * (optional) Modal size
         */
        "size"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Transition overrides
         */
        "transitions"?: any;
        /**
          * (optional) Modal variant
         */
        "variant"?: string;
    }
    interface ScaleProgressBar {
        /**
          * (optional) Progress bar class
         */
        "customClass"?: string;
        /**
          * (optional) Progress bar customColor
         */
        "customColor"?: string;
        /**
          * (optional) Progress bar disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Progress bar error
         */
        "hasError"?: boolean;
        /**
          * (optional) Progress bar icon indicator
         */
        "icon"?: string;
        /**
          * (required) Progress bar percentage
         */
        "percentage": number;
        /**
          * (optional) Progress bar percentage text
         */
        "showStatus"?: boolean;
        /**
          * (optional) Progress bar status description text
         */
        "statusDescription"?: string;
        /**
          * (optional) Progress text display inside bar
         */
        "statusInside"?: boolean;
        /**
          * (optional) Progress bar stroke width
         */
        "strokeWidth"?: number;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleSidebarNav {
        /**
          * From mdn: A brief description of the purpose of the navigation, omitting the term "navigation", as the screen reader will read both the role and the contents of the label.
         */
        "ariaLabel"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleSidebarNavCollapsible {
        /**
          * Bold label and icon
         */
        "bold": boolean;
        /**
          * Used normally for third level items
         */
        "condensed": boolean;
        /**
          * The width and height of the icon in pixels
         */
        "iconSize": number;
        /**
          * Label and icon get the active color
         */
        "isCurrent"?: boolean;
        /**
          * Set this to `true` to expand
         */
        "isExpanded"?: boolean;
        /**
          * The text for the button
         */
        "label": string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * The parent wrapper
         */
        "tag"?: string;
    }
    interface ScaleSidebarNavItem {
        /**
          * Bold text
         */
        "bold": boolean;
        /**
          * Used normally for third level items, remove the bottom border
         */
        "condensed": boolean;
        /**
          * Text gets the active color
         */
        "isCurrent": boolean;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleSlider {
        /**
          * (optional) Slider class
         */
        "customClass"?: string;
        /**
          * (optional) slider custom color
         */
        "customColor"?: string;
        /**
          * (optional) disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) slider label
         */
        "label"?: string;
        /**
          * (optional) the maximal value of the slider
         */
        "max"?: number;
        /**
          * t(optional) he minimal value of the slider
         */
        "min"?: number;
        /**
          * (optional) slider display value
         */
        "showValue"?: boolean;
        /**
          * (optional) the step size to increase or decrease when dragging slider
         */
        "step"?: number;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) larger thumb
         */
        "thumbLarge"?: boolean;
        /**
          * (optional) smaller track
         */
        "trackSmall"?: boolean;
        /**
          * (optional) the display value of the slider
         */
        "value"?: number;
    }
    interface ScaleSsrSlotFix {
    }
    interface ScaleSwitch {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Switch class
         */
        "customClass"?: string;
        /**
          * (optional) Disabled switch
         */
        "disabled"?: boolean;
        /**
          * (optional) Input id
         */
        "inputId"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleTabHeader {
        "icon"?: string;
        "iconOnly"?: boolean;
        "iconSize"?: number;
        "label": string;
        "selected"?: boolean;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: StyleSheet;
    }
    interface ScaleTabNav {
        "ariaLabel"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: StyleSheet;
    }
    interface ScaleTabPanel {
        "ariaLabel"?: string;
        "identifier"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: StyleSheet;
    }
    interface ScaleTable {
        /**
          * (optional) Tag class
         */
        "customClass"?: string;
        /**
          * (optional) Display sort arrows on/off
         */
        "showSort"?: boolean;
        /**
          * (optional) Visual size
         */
        "size"?: 'default' | 'small' | string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleTag {
        /**
          * (optional) Tag class
         */
        "customClass"?: string;
        /**
          * (optional) Tag disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Tag dismissable
         */
        "dismissable"?: boolean;
        /**
          * (optional) Tag href
         */
        "href"?: string;
        /**
          * (optional) Tag size
         */
        "size"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Tag target
         */
        "target"?: string;
        /**
          * (optional) Tag variant
         */
        "variant"?: string;
    }
    interface ScaleText {
        /**
          * (optional) Text class
         */
        "customClass"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Text tag
         */
        "tag"?: string;
        /**
          * (optional) Text variant
         */
        "variant"?: string;
    }
    interface ScaleToast {
        /**
          * (optional) Animated toast
         */
        "animated"?: boolean;
        /**
          * (optional) Toast autohide time
         */
        "autoHide"?: boolean | number;
        /**
          * (optional) Toast class
         */
        "customClass"?: string;
        /**
          * (optional) Toast fade duration
         */
        "fadeDuration"?: number;
        /**
          * Toast method: open()
         */
        "open": () => Promise<void>;
        /**
          * (optional) Toast opened
         */
        "opened"?: boolean;
        /**
          * (optional) Toast position right
         */
        "positionRight"?: number;
        /**
          * (optional) Toast position at the top
         */
        "positionTop"?: number;
        /**
          * (optional) Toast size
         */
        "size"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: StyleSheet;
        /**
          * (optional) Toast time
         */
        "time"?: number;
        /**
          * (optional) Toast variant
         */
        "variant"?: string;
    }
}
declare global {
    interface HTMLAppLogoElement extends Components.AppLogo, HTMLStencilElement {
    }
    var HTMLAppLogoElement: {
        prototype: HTMLAppLogoElement;
        new (): HTMLAppLogoElement;
    };
    interface HTMLAppMegaMenuElement extends Components.AppMegaMenu, HTMLStencilElement {
    }
    var HTMLAppMegaMenuElement: {
        prototype: HTMLAppMegaMenuElement;
        new (): HTMLAppMegaMenuElement;
    };
    interface HTMLAppNavigationMainMobileElement extends Components.AppNavigationMainMobile, HTMLStencilElement {
    }
    var HTMLAppNavigationMainMobileElement: {
        prototype: HTMLAppNavigationMainMobileElement;
        new (): HTMLAppNavigationMainMobileElement;
    };
    interface HTMLAppNavigationSectorMobileElement extends Components.AppNavigationSectorMobile, HTMLStencilElement {
    }
    var HTMLAppNavigationSectorMobileElement: {
        prototype: HTMLAppNavigationSectorMobileElement;
        new (): HTMLAppNavigationSectorMobileElement;
    };
    interface HTMLScaleAccordionElement extends Components.ScaleAccordion, HTMLStencilElement {
    }
    var HTMLScaleAccordionElement: {
        prototype: HTMLScaleAccordionElement;
        new (): HTMLScaleAccordionElement;
    };
    interface HTMLScaleAlertElement extends Components.ScaleAlert, HTMLStencilElement {
    }
    var HTMLScaleAlertElement: {
        prototype: HTMLScaleAlertElement;
        new (): HTMLScaleAlertElement;
    };
    interface HTMLScaleAppHeaderElement extends Components.ScaleAppHeader, HTMLStencilElement {
    }
    var HTMLScaleAppHeaderElement: {
        prototype: HTMLScaleAppHeaderElement;
        new (): HTMLScaleAppHeaderElement;
    };
    interface HTMLScaleAppShellElement extends Components.ScaleAppShell, HTMLStencilElement {
    }
    var HTMLScaleAppShellElement: {
        prototype: HTMLScaleAppShellElement;
        new (): HTMLScaleAppShellElement;
    };
    interface HTMLScaleBreadcrumbElement extends Components.ScaleBreadcrumb, HTMLStencilElement {
    }
    var HTMLScaleBreadcrumbElement: {
        prototype: HTMLScaleBreadcrumbElement;
        new (): HTMLScaleBreadcrumbElement;
    };
    interface HTMLScaleButtonElement extends Components.ScaleButton, HTMLStencilElement {
    }
    var HTMLScaleButtonElement: {
        prototype: HTMLScaleButtonElement;
        new (): HTMLScaleButtonElement;
    };
    interface HTMLScaleCardElement extends Components.ScaleCard, HTMLStencilElement {
    }
    var HTMLScaleCardElement: {
        prototype: HTMLScaleCardElement;
        new (): HTMLScaleCardElement;
    };
    interface HTMLScaleCarouselElement extends Components.ScaleCarousel, HTMLStencilElement {
    }
    var HTMLScaleCarouselElement: {
        prototype: HTMLScaleCarouselElement;
        new (): HTMLScaleCarouselElement;
    };
    interface HTMLScaleChartStackCardElement extends Components.ScaleChartStackCard, HTMLStencilElement {
    }
    var HTMLScaleChartStackCardElement: {
        prototype: HTMLScaleChartStackCardElement;
        new (): HTMLScaleChartStackCardElement;
    };
    interface HTMLScaleCollapsibleElement extends Components.ScaleCollapsible, HTMLStencilElement {
    }
    var HTMLScaleCollapsibleElement: {
        prototype: HTMLScaleCollapsibleElement;
        new (): HTMLScaleCollapsibleElement;
    };
    interface HTMLScaleDividerElement extends Components.ScaleDivider, HTMLStencilElement {
    }
    var HTMLScaleDividerElement: {
        prototype: HTMLScaleDividerElement;
        new (): HTMLScaleDividerElement;
    };
    interface HTMLScaleIconElement extends Components.ScaleIcon, HTMLStencilElement {
    }
    var HTMLScaleIconElement: {
        prototype: HTMLScaleIconElement;
        new (): HTMLScaleIconElement;
    };
    interface HTMLScaleInputElement extends Components.ScaleInput, HTMLStencilElement {
    }
    var HTMLScaleInputElement: {
        prototype: HTMLScaleInputElement;
        new (): HTMLScaleInputElement;
    };
    interface HTMLScaleLinkElement extends Components.ScaleLink, HTMLStencilElement {
    }
    var HTMLScaleLinkElement: {
        prototype: HTMLScaleLinkElement;
        new (): HTMLScaleLinkElement;
    };
    interface HTMLScaleListElement extends Components.ScaleList, HTMLStencilElement {
    }
    var HTMLScaleListElement: {
        prototype: HTMLScaleListElement;
        new (): HTMLScaleListElement;
    };
    interface HTMLScaleListItemElement extends Components.ScaleListItem, HTMLStencilElement {
    }
    var HTMLScaleListItemElement: {
        prototype: HTMLScaleListItemElement;
        new (): HTMLScaleListItemElement;
    };
    interface HTMLScaleModalElement extends Components.ScaleModal, HTMLStencilElement {
    }
    var HTMLScaleModalElement: {
        prototype: HTMLScaleModalElement;
        new (): HTMLScaleModalElement;
    };
    interface HTMLScaleProgressBarElement extends Components.ScaleProgressBar, HTMLStencilElement {
    }
    var HTMLScaleProgressBarElement: {
        prototype: HTMLScaleProgressBarElement;
        new (): HTMLScaleProgressBarElement;
    };
    interface HTMLScaleSidebarNavElement extends Components.ScaleSidebarNav, HTMLStencilElement {
    }
    var HTMLScaleSidebarNavElement: {
        prototype: HTMLScaleSidebarNavElement;
        new (): HTMLScaleSidebarNavElement;
    };
    interface HTMLScaleSidebarNavCollapsibleElement extends Components.ScaleSidebarNavCollapsible, HTMLStencilElement {
    }
    var HTMLScaleSidebarNavCollapsibleElement: {
        prototype: HTMLScaleSidebarNavCollapsibleElement;
        new (): HTMLScaleSidebarNavCollapsibleElement;
    };
    interface HTMLScaleSidebarNavItemElement extends Components.ScaleSidebarNavItem, HTMLStencilElement {
    }
    var HTMLScaleSidebarNavItemElement: {
        prototype: HTMLScaleSidebarNavItemElement;
        new (): HTMLScaleSidebarNavItemElement;
    };
    interface HTMLScaleSliderElement extends Components.ScaleSlider, HTMLStencilElement {
    }
    var HTMLScaleSliderElement: {
        prototype: HTMLScaleSliderElement;
        new (): HTMLScaleSliderElement;
    };
    interface HTMLScaleSsrSlotFixElement extends Components.ScaleSsrSlotFix, HTMLStencilElement {
    }
    var HTMLScaleSsrSlotFixElement: {
        prototype: HTMLScaleSsrSlotFixElement;
        new (): HTMLScaleSsrSlotFixElement;
    };
    interface HTMLScaleSwitchElement extends Components.ScaleSwitch, HTMLStencilElement {
    }
    var HTMLScaleSwitchElement: {
        prototype: HTMLScaleSwitchElement;
        new (): HTMLScaleSwitchElement;
    };
    interface HTMLScaleTabHeaderElement extends Components.ScaleTabHeader, HTMLStencilElement {
    }
    var HTMLScaleTabHeaderElement: {
        prototype: HTMLScaleTabHeaderElement;
        new (): HTMLScaleTabHeaderElement;
    };
    interface HTMLScaleTabNavElement extends Components.ScaleTabNav, HTMLStencilElement {
    }
    var HTMLScaleTabNavElement: {
        prototype: HTMLScaleTabNavElement;
        new (): HTMLScaleTabNavElement;
    };
    interface HTMLScaleTabPanelElement extends Components.ScaleTabPanel, HTMLStencilElement {
    }
    var HTMLScaleTabPanelElement: {
        prototype: HTMLScaleTabPanelElement;
        new (): HTMLScaleTabPanelElement;
    };
    interface HTMLScaleTableElement extends Components.ScaleTable, HTMLStencilElement {
    }
    var HTMLScaleTableElement: {
        prototype: HTMLScaleTableElement;
        new (): HTMLScaleTableElement;
    };
    interface HTMLScaleTagElement extends Components.ScaleTag, HTMLStencilElement {
    }
    var HTMLScaleTagElement: {
        prototype: HTMLScaleTagElement;
        new (): HTMLScaleTagElement;
    };
    interface HTMLScaleTextElement extends Components.ScaleText, HTMLStencilElement {
    }
    var HTMLScaleTextElement: {
        prototype: HTMLScaleTextElement;
        new (): HTMLScaleTextElement;
    };
    interface HTMLScaleToastElement extends Components.ScaleToast, HTMLStencilElement {
    }
    var HTMLScaleToastElement: {
        prototype: HTMLScaleToastElement;
        new (): HTMLScaleToastElement;
    };
    interface HTMLElementTagNameMap {
        "app-logo": HTMLAppLogoElement;
        "app-mega-menu": HTMLAppMegaMenuElement;
        "app-navigation-main-mobile": HTMLAppNavigationMainMobileElement;
        "app-navigation-sector-mobile": HTMLAppNavigationSectorMobileElement;
        "scale-accordion": HTMLScaleAccordionElement;
        "scale-alert": HTMLScaleAlertElement;
        "scale-app-header": HTMLScaleAppHeaderElement;
        "scale-app-shell": HTMLScaleAppShellElement;
        "scale-breadcrumb": HTMLScaleBreadcrumbElement;
        "scale-button": HTMLScaleButtonElement;
        "scale-card": HTMLScaleCardElement;
        "scale-carousel": HTMLScaleCarouselElement;
        "scale-chart-stack-card": HTMLScaleChartStackCardElement;
        "scale-collapsible": HTMLScaleCollapsibleElement;
        "scale-divider": HTMLScaleDividerElement;
        "scale-icon": HTMLScaleIconElement;
        "scale-input": HTMLScaleInputElement;
        "scale-link": HTMLScaleLinkElement;
        "scale-list": HTMLScaleListElement;
        "scale-list-item": HTMLScaleListItemElement;
        "scale-modal": HTMLScaleModalElement;
        "scale-progress-bar": HTMLScaleProgressBarElement;
        "scale-sidebar-nav": HTMLScaleSidebarNavElement;
        "scale-sidebar-nav-collapsible": HTMLScaleSidebarNavCollapsibleElement;
        "scale-sidebar-nav-item": HTMLScaleSidebarNavItemElement;
        "scale-slider": HTMLScaleSliderElement;
        "scale-ssr-slot-fix": HTMLScaleSsrSlotFixElement;
        "scale-switch": HTMLScaleSwitchElement;
        "scale-tab-header": HTMLScaleTabHeaderElement;
        "scale-tab-nav": HTMLScaleTabNavElement;
        "scale-tab-panel": HTMLScaleTabPanelElement;
        "scale-table": HTMLScaleTableElement;
        "scale-tag": HTMLScaleTagElement;
        "scale-text": HTMLScaleTextElement;
        "scale-toast": HTMLScaleToastElement;
    }
}
declare namespace LocalJSX {
    interface AppLogo {
        "claim"?: boolean;
        "color"?: string;
        "href"?: string;
    }
    interface AppMegaMenu {
        "activeRouteId"?: string;
        "hide"?: () => void;
        "navigation"?: MenuItem[];
    }
    interface AppNavigationMainMobile {
        "activeRouteId"?: string;
        "navigation"?: MenuItem[];
        "onCloseMenu"?: (event: CustomEvent<any>) => void;
    }
    interface AppNavigationSectorMobile {
        "activeSectorId"?: string;
        "navigation"?: MenuItem[];
    }
    interface ScaleAccordion {
        "dependent"?: boolean;
        "styles"?: any;
    }
    interface ScaleAlert {
        /**
          * (optional) Alert class
         */
        "customClass"?: string;
        /**
          * (optional) Alert title
         */
        "headline"?: string;
        /**
          * (optional) Alert icon
         */
        "icon"?: string;
        /**
          * (optional) Alert opened
         */
        "opened"?: boolean;
        /**
          * (optional) Alert size
         */
        "size"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Alert timeout
         */
        "timeout"?: boolean | number;
        /**
          * (optional) Alert variant
         */
        "variant"?: string;
    }
    interface ScaleAppHeader {
        "activeRouteId"?: string;
        "activeSectorId"?: string;
        "addonNavigation"?: any[];
        "customClass"?: string;
        "iconNavigation"?: any[];
        "mainNavigation"?: any[];
        "scrolled"?: boolean;
        "sectorNavigation"?: any[];
    }
    interface ScaleAppShell {
        "activeRouteId"?: string;
        "activeSectorId"?: string;
        "addonNavigation"?: any;
        "customClass"?: string;
        "iconNavigation"?: any;
        "mainNavigation"?: any;
        "sectorNavigation"?: any;
    }
    interface ScaleBreadcrumb {
        "separator"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleButton {
        "ariaLabel"?: string;
        /**
          * (optional) Button class
         */
        "customClass"?: string;
        /**
          * (optional) Disabled button
         */
        "disabled"?: boolean;
        "focusable"?: boolean;
        /**
          * (optional) Link button
         */
        "href"?: string;
        /**
          * (optional) Icon only
         */
        "icon"?: string;
        /**
          * (optional) Icon after
         */
        "iconAfter"?: string;
        /**
          * (optional) Icon before
         */
        "iconBefore"?: string;
        /**
          * (optional) Icon only
         */
        "iconSize"?: number;
        "role"?: string;
        /**
          * (optional) Button size
         */
        "size"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Link target button
         */
        "target"?: string;
        /**
          * (optional) button type
         */
        "type"?: 'reset' | 'submit' | 'button';
        /**
          * (optional) Button variant
         */
        "variant"?: string;
    }
    interface ScaleCard {
        /**
          * (optional) Card class
         */
        "customClass"?: string;
        /**
          * (optional) Link disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Link card
         */
        "href"?: string;
        /**
          * (optional) Link interactive
         */
        "interactive"?: boolean;
        /**
          * (optional) Padding off
         */
        "noPadding"?: boolean;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Link card target
         */
        "target"?: string;
    }
    interface ScaleCarousel {
        /**
          * (optional) Carousel class
         */
        "customClass"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) carousel display direction
         */
        "vertical"?: boolean;
    }
    interface ScaleChartStackCard {
        /**
          * (optional) Custom class
         */
        "customClass"?: string;
        /**
          * Chart Data
         */
        "data"?: string | Array<Record<'type' | 'value' | 'percentage', string>>;
        /**
          * Chart Title
         */
        "heading"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleCollapsible {
        "isExpanded"?: boolean;
        "label"?: string;
        "onToggleHead"?: (event: CustomEvent<any>) => void;
        "onToggler"?: (event: CustomEvent<any>) => void;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        "tag"?: string;
    }
    interface ScaleDivider {
        /**
          * (optional) Divider class
         */
        "customClass"?: string;
        /**
          * (optional) Divider size
         */
        "size"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Divider vertical
         */
        "vertical"?: boolean;
    }
    interface ScaleIcon {
        /**
          * (optional) Tag custom class
         */
        "customClass"?: string;
        /**
          * The SVG `fill` attribute
         */
        "fill"?: string;
        "focusable"?: boolean;
        /**
          * A name that will be used to reference an SVG object defined elsewhere, via `<use xlink:href="">`. `icon-` will be prepended to the name, so if you pass `circle`, it will look for for the `icon-circle` id e.g. `<use xlink:href="#icon-circle">`. If there is no element in the document with the id by the name provided, this component will render empty.
         */
        "name"?: string;
        /**
          * A path shape to be used in the `d` attribute of a path element.
         */
        "path"?: string;
        /**
          * Will be used for both `width` and `height`, all icons are square. Keep in mind the `viewBox` attribute is set to "0 0 24 24".
         */
        "size"?: number;
        /**
          * The SVG `stroke` attribute
         */
        "stroke"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleInput {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) textarea column
         */
        "cols"?: number;
        /**
          * (optional) Input counter
         */
        "counter"?: boolean;
        /**
          * (optional) Input text class
         */
        "customClass"?: string;
        /**
          * (optional) Input disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Input helper text
         */
        "helperText"?: string;
        /**
          * (optional) Input checkbox checked icon
         */
        "icon"?: string;
        /**
          * (optional) Input checkbox id
         */
        "inputId"?: string;
        /**
          * (optional) Input label
         */
        "label"?: string;
        /**
          * (optional) Input max length
         */
        "maxLength"?: number;
        /**
          * (optional) Input min length
         */
        "minLength"?: number;
        /**
          * (optional) select multiple options
         */
        "multiple"?: boolean;
        /**
          * (optional) Input name
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onScaleBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onScaleChange"?: (event: CustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onScaleFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onScaleInput"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * Emitted on keydown.
         */
        "onScaleKeyDown"?: (event: CustomEvent<KeyboardEvent>) => void;
        /**
          * (optional) Input placeHolder
         */
        "placeholder"?: string;
        /**
          * (optional) Input required
         */
        "required"?: boolean;
        /**
          * (optional) textarea resize
         */
        "resize"?: 'unset' | 'none' | 'vertical' | 'horizontal';
        /**
          * (optional) textarea row
         */
        "rows"?: number;
        /**
          * (optional) Input size
         */
        "size"?: string;
        /**
          * (optional) Input status
         */
        "status"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) input background transparent
         */
        "transparent"?: boolean;
        /**
          * (optional) Input type
         */
        "type"?: | 'email'
    | 'hidden'
    | 'number'
    | 'password'
    | 'tel'
    | 'text'
    | 'checkbox'
    | 'radio'
    | 'select'
    | 'textarea'
    | 'url';
        /**
          * (optional) Input value
         */
        "value"?: string | number | null;
        /**
          * (optional) Input label variant
         */
        "variant"?: 'animated' | 'static';
        /**
          * (optional) the number of visible options in a select drop-down list
         */
        "visibleSize"?: number;
    }
    interface ScaleLink {
        /**
          * (optional) Block link
         */
        "block"?: boolean;
        /**
          * (optional) Link class
         */
        "customClass"?: string;
        /**
          * (optional) Disabled link
         */
        "disabled"?: boolean;
        /**
          * (optional) Link href
         */
        "href"?: string;
        /**
          * (optional) Icon only
         */
        "icon"?: string;
        /**
          * (optional) Icon size
         */
        "iconSize"?: number;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Link open a new tag
         */
        "target"?: string;
        /**
          * (optional) Link variant
         */
        "variant"?: string;
    }
    interface ScaleList {
        "styles"?: any;
        /**
          * (optional) List variant
         */
        "variant"?: string;
    }
    interface ScaleListItem {
        /**
          * (optional) List item icon
         */
        "icon"?: string;
        /**
          * (optional) list Icon size
         */
        "iconSize"?: number;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) List item style type
         */
        "type"?: string;
    }
    interface ScaleModal {
        /**
          * (optional) Modal class
         */
        "customClass"?: string;
        /**
          * (optional) Callback fired when the component requests to be closed.
         */
        "onScaleClose"?: (event: CustomEvent<MouseEvent | KeyboardEvent>) => void;
        /**
          * (optional) If true, the Modal is open.
         */
        "opened"?: boolean;
        /**
          * (optional) Modal size
         */
        "size"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Transition overrides
         */
        "transitions"?: any;
        /**
          * (optional) Modal variant
         */
        "variant"?: string;
    }
    interface ScaleProgressBar {
        /**
          * (optional) Progress bar class
         */
        "customClass"?: string;
        /**
          * (optional) Progress bar customColor
         */
        "customColor"?: string;
        /**
          * (optional) Progress bar disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Progress bar error
         */
        "hasError"?: boolean;
        /**
          * (optional) Progress bar icon indicator
         */
        "icon"?: string;
        /**
          * (required) Progress bar percentage
         */
        "percentage"?: number;
        /**
          * (optional) Progress bar percentage text
         */
        "showStatus"?: boolean;
        /**
          * (optional) Progress bar status description text
         */
        "statusDescription"?: string;
        /**
          * (optional) Progress text display inside bar
         */
        "statusInside"?: boolean;
        /**
          * (optional) Progress bar stroke width
         */
        "strokeWidth"?: number;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleSidebarNav {
        /**
          * From mdn: A brief description of the purpose of the navigation, omitting the term "navigation", as the screen reader will read both the role and the contents of the label.
         */
        "ariaLabel"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleSidebarNavCollapsible {
        /**
          * Bold label and icon
         */
        "bold"?: boolean;
        /**
          * Used normally for third level items
         */
        "condensed"?: boolean;
        /**
          * The width and height of the icon in pixels
         */
        "iconSize"?: number;
        /**
          * Label and icon get the active color
         */
        "isCurrent"?: boolean;
        /**
          * Set this to `true` to expand
         */
        "isExpanded"?: boolean;
        /**
          * The text for the button
         */
        "label"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * The parent wrapper
         */
        "tag"?: string;
    }
    interface ScaleSidebarNavItem {
        /**
          * Bold text
         */
        "bold"?: boolean;
        /**
          * Used normally for third level items, remove the bottom border
         */
        "condensed"?: boolean;
        /**
          * Text gets the active color
         */
        "isCurrent"?: boolean;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleSlider {
        /**
          * (optional) Slider class
         */
        "customClass"?: string;
        /**
          * (optional) slider custom color
         */
        "customColor"?: string;
        /**
          * (optional) disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) slider label
         */
        "label"?: string;
        /**
          * (optional) the maximal value of the slider
         */
        "max"?: number;
        /**
          * t(optional) he minimal value of the slider
         */
        "min"?: number;
        "onScaleChange"?: (event: CustomEvent<number>) => void;
        /**
          * (optional) slider display value
         */
        "showValue"?: boolean;
        /**
          * (optional) the step size to increase or decrease when dragging slider
         */
        "step"?: number;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) larger thumb
         */
        "thumbLarge"?: boolean;
        /**
          * (optional) smaller track
         */
        "trackSmall"?: boolean;
        /**
          * (optional) the display value of the slider
         */
        "value"?: number;
    }
    interface ScaleSsrSlotFix {
    }
    interface ScaleSwitch {
        /**
          * (optional) Active switch
         */
        "checked"?: boolean;
        /**
          * (optional) Switch class
         */
        "customClass"?: string;
        /**
          * (optional) Disabled switch
         */
        "disabled"?: boolean;
        /**
          * (optional) Input id
         */
        "inputId"?: string;
        /**
          * Emitted when the switch was clicked
         */
        "onScaleChange"?: (event: CustomEvent<void>) => void;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleTabHeader {
        "icon"?: string;
        "iconOnly"?: boolean;
        "iconSize"?: number;
        "label"?: string;
        "onTabclick"?: (event: CustomEvent<any>) => void;
        "selected"?: boolean;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: StyleSheet;
    }
    interface ScaleTabNav {
        "ariaLabel"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: StyleSheet;
    }
    interface ScaleTabPanel {
        "ariaLabel"?: string;
        "identifier"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: StyleSheet;
    }
    interface ScaleTable {
        /**
          * (optional) Tag class
         */
        "customClass"?: string;
        /**
          * (optional) Display sort arrows on/off
         */
        "showSort"?: boolean;
        /**
          * (optional) Visual size
         */
        "size"?: 'default' | 'small' | string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
    }
    interface ScaleTag {
        /**
          * (optional) Tag class
         */
        "customClass"?: string;
        /**
          * (optional) Tag disabled
         */
        "disabled"?: boolean;
        /**
          * (optional) Tag dismissable
         */
        "dismissable"?: boolean;
        /**
          * (optional) Tag href
         */
        "href"?: string;
        /**
          * (optional) Close icon click event
         */
        "onScaleClose"?: (event: CustomEvent<MouseEvent>) => void;
        /**
          * (optional) Tag size
         */
        "size"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Tag target
         */
        "target"?: string;
        /**
          * (optional) Tag variant
         */
        "variant"?: string;
    }
    interface ScaleText {
        /**
          * (optional) Text class
         */
        "customClass"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: any;
        /**
          * (optional) Text tag
         */
        "tag"?: string;
        /**
          * (optional) Text variant
         */
        "variant"?: string;
    }
    interface ScaleToast {
        /**
          * (optional) Animated toast
         */
        "animated"?: boolean;
        /**
          * (optional) Toast autohide time
         */
        "autoHide"?: boolean | number;
        /**
          * (optional) Toast class
         */
        "customClass"?: string;
        /**
          * (optional) Toast fade duration
         */
        "fadeDuration"?: number;
        /**
          * (optional) Toast opened
         */
        "opened"?: boolean;
        /**
          * (optional) Toast position right
         */
        "positionRight"?: number;
        /**
          * (optional) Toast position at the top
         */
        "positionTop"?: number;
        /**
          * (optional) Toast size
         */
        "size"?: string;
        /**
          * (optional) Injected jss styles
         */
        "styles"?: StyleSheet;
        /**
          * (optional) Toast time
         */
        "time"?: number;
        /**
          * (optional) Toast variant
         */
        "variant"?: string;
    }
    interface IntrinsicElements {
        "app-logo": AppLogo;
        "app-mega-menu": AppMegaMenu;
        "app-navigation-main-mobile": AppNavigationMainMobile;
        "app-navigation-sector-mobile": AppNavigationSectorMobile;
        "scale-accordion": ScaleAccordion;
        "scale-alert": ScaleAlert;
        "scale-app-header": ScaleAppHeader;
        "scale-app-shell": ScaleAppShell;
        "scale-breadcrumb": ScaleBreadcrumb;
        "scale-button": ScaleButton;
        "scale-card": ScaleCard;
        "scale-carousel": ScaleCarousel;
        "scale-chart-stack-card": ScaleChartStackCard;
        "scale-collapsible": ScaleCollapsible;
        "scale-divider": ScaleDivider;
        "scale-icon": ScaleIcon;
        "scale-input": ScaleInput;
        "scale-link": ScaleLink;
        "scale-list": ScaleList;
        "scale-list-item": ScaleListItem;
        "scale-modal": ScaleModal;
        "scale-progress-bar": ScaleProgressBar;
        "scale-sidebar-nav": ScaleSidebarNav;
        "scale-sidebar-nav-collapsible": ScaleSidebarNavCollapsible;
        "scale-sidebar-nav-item": ScaleSidebarNavItem;
        "scale-slider": ScaleSlider;
        "scale-ssr-slot-fix": ScaleSsrSlotFix;
        "scale-switch": ScaleSwitch;
        "scale-tab-header": ScaleTabHeader;
        "scale-tab-nav": ScaleTabNav;
        "scale-tab-panel": ScaleTabPanel;
        "scale-table": ScaleTable;
        "scale-tag": ScaleTag;
        "scale-text": ScaleText;
        "scale-toast": ScaleToast;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-logo": LocalJSX.AppLogo & JSXBase.HTMLAttributes<HTMLAppLogoElement>;
            "app-mega-menu": LocalJSX.AppMegaMenu & JSXBase.HTMLAttributes<HTMLAppMegaMenuElement>;
            "app-navigation-main-mobile": LocalJSX.AppNavigationMainMobile & JSXBase.HTMLAttributes<HTMLAppNavigationMainMobileElement>;
            "app-navigation-sector-mobile": LocalJSX.AppNavigationSectorMobile & JSXBase.HTMLAttributes<HTMLAppNavigationSectorMobileElement>;
            "scale-accordion": LocalJSX.ScaleAccordion & JSXBase.HTMLAttributes<HTMLScaleAccordionElement>;
            "scale-alert": LocalJSX.ScaleAlert & JSXBase.HTMLAttributes<HTMLScaleAlertElement>;
            "scale-app-header": LocalJSX.ScaleAppHeader & JSXBase.HTMLAttributes<HTMLScaleAppHeaderElement>;
            "scale-app-shell": LocalJSX.ScaleAppShell & JSXBase.HTMLAttributes<HTMLScaleAppShellElement>;
            "scale-breadcrumb": LocalJSX.ScaleBreadcrumb & JSXBase.HTMLAttributes<HTMLScaleBreadcrumbElement>;
            "scale-button": LocalJSX.ScaleButton & JSXBase.HTMLAttributes<HTMLScaleButtonElement>;
            "scale-card": LocalJSX.ScaleCard & JSXBase.HTMLAttributes<HTMLScaleCardElement>;
            "scale-carousel": LocalJSX.ScaleCarousel & JSXBase.HTMLAttributes<HTMLScaleCarouselElement>;
            "scale-chart-stack-card": LocalJSX.ScaleChartStackCard & JSXBase.HTMLAttributes<HTMLScaleChartStackCardElement>;
            "scale-collapsible": LocalJSX.ScaleCollapsible & JSXBase.HTMLAttributes<HTMLScaleCollapsibleElement>;
            "scale-divider": LocalJSX.ScaleDivider & JSXBase.HTMLAttributes<HTMLScaleDividerElement>;
            "scale-icon": LocalJSX.ScaleIcon & JSXBase.HTMLAttributes<HTMLScaleIconElement>;
            "scale-input": LocalJSX.ScaleInput & JSXBase.HTMLAttributes<HTMLScaleInputElement>;
            "scale-link": LocalJSX.ScaleLink & JSXBase.HTMLAttributes<HTMLScaleLinkElement>;
            "scale-list": LocalJSX.ScaleList & JSXBase.HTMLAttributes<HTMLScaleListElement>;
            "scale-list-item": LocalJSX.ScaleListItem & JSXBase.HTMLAttributes<HTMLScaleListItemElement>;
            "scale-modal": LocalJSX.ScaleModal & JSXBase.HTMLAttributes<HTMLScaleModalElement>;
            "scale-progress-bar": LocalJSX.ScaleProgressBar & JSXBase.HTMLAttributes<HTMLScaleProgressBarElement>;
            "scale-sidebar-nav": LocalJSX.ScaleSidebarNav & JSXBase.HTMLAttributes<HTMLScaleSidebarNavElement>;
            "scale-sidebar-nav-collapsible": LocalJSX.ScaleSidebarNavCollapsible & JSXBase.HTMLAttributes<HTMLScaleSidebarNavCollapsibleElement>;
            "scale-sidebar-nav-item": LocalJSX.ScaleSidebarNavItem & JSXBase.HTMLAttributes<HTMLScaleSidebarNavItemElement>;
            "scale-slider": LocalJSX.ScaleSlider & JSXBase.HTMLAttributes<HTMLScaleSliderElement>;
            "scale-ssr-slot-fix": LocalJSX.ScaleSsrSlotFix & JSXBase.HTMLAttributes<HTMLScaleSsrSlotFixElement>;
            "scale-switch": LocalJSX.ScaleSwitch & JSXBase.HTMLAttributes<HTMLScaleSwitchElement>;
            "scale-tab-header": LocalJSX.ScaleTabHeader & JSXBase.HTMLAttributes<HTMLScaleTabHeaderElement>;
            "scale-tab-nav": LocalJSX.ScaleTabNav & JSXBase.HTMLAttributes<HTMLScaleTabNavElement>;
            "scale-tab-panel": LocalJSX.ScaleTabPanel & JSXBase.HTMLAttributes<HTMLScaleTabPanelElement>;
            "scale-table": LocalJSX.ScaleTable & JSXBase.HTMLAttributes<HTMLScaleTableElement>;
            "scale-tag": LocalJSX.ScaleTag & JSXBase.HTMLAttributes<HTMLScaleTagElement>;
            "scale-text": LocalJSX.ScaleText & JSXBase.HTMLAttributes<HTMLScaleTextElement>;
            "scale-toast": LocalJSX.ScaleToast & JSXBase.HTMLAttributes<HTMLScaleToastElement>;
        }
    }
}
